// App.tsx (This file is typically minimal with Expo Router)
// You might only need this if you have global providers or setup outside of Expo Router's _layout.tsx
// However, for this setup, most global providers will go into app/_layout.tsx

import { SplashScreen } from 'expo-router';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useFonts } from 'expo-font';
import { useEffect } from 'react';
import { RootSiblingParent } from 'react-native-root-siblings'; // For potential toast messages

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

const queryClient = new QueryClient();

export default function App() {
  const [fontsLoaded] = useFonts({
    // Add custom fonts here if needed, e.g., Inter
    'Inter-Regular': require('./assets/fonts/Inter-Regular.ttf'),
    'Inter-Bold': require('./assets/fonts/Inter-Bold.ttf'),
    // Add other fonts like FontAwesome if needed for icons
  });

  useEffect(() => {
    if (fontsLoaded) {
      SplashScreen.hideAsync();
    }
  }, [fontsLoaded]);

  if (!fontsLoaded) {
    return null;
  }

  // Wraps the entire app with QueryClientProvider and RootSiblingParent
  // RootSiblingParent is useful for global toasts/modals outside of navigation context
  return (
    <RootSiblingParent>
      <QueryClientProvider client={queryClient}>
        {/* The actual App content will be handled by expo-router in app/_layout.tsx */}
        {/* We just need to make sure our global providers are here or accessible to expo-router */}
        {/* Expo Router's Root Layout will automatically be rendered here */}
      </QueryClientProvider>
    </RootSiblingParent>
  );
}

```typescript
// app/_layout.tsx
// This file defines the root layout and navigation for your app using Expo Router.
// It sets up the tab navigation at the bottom.

import { Tabs } from 'expo-router';
import { FontAwesome } from '@expo/vector-icons';
import { StatusBar } from 'expo-status-bar';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { RootSiblingParent } from 'react-native-root-siblings'; // For global toast messages
import { Text, View } from 'react-native'; // Added Text and View for inline styling with className

const queryClient = new QueryClient();

export default function AppRootLayout() {
  return (
    // QueryClientProvider wraps the entire app to enable React Query
    <QueryClientProvider client={queryClient}>
      {/* RootSiblingParent for potential global toast messages or modals */}
      <RootSiblingParent>
        {/* StatusBar for controlling the status bar appearance */}
        <StatusBar style="auto" />
        {/* Tabs component from expo-router creates the bottom tab navigation */}
        <Tabs
          screenOptions={{
            headerShown: false, // Hide header on tab screens, individual screens can show their own
            tabBarActiveTintColor: '#3b82f6', // Tailwind blue-500
            tabBarInactiveTintColor: '#6b7280', // Tailwind gray-500
            tabBarStyle: {
              backgroundColor: '#f9fafb', // Tailwind gray-50
              borderTopWidth: 0,
              elevation: 0, // Remove shadow on Android
              shadowOpacity: 0, // Remove shadow on iOS
            },
            tabBarLabelStyle: {
              fontFamily: 'Inter-Regular', // Use your custom font
              fontSize: 12,
              paddingBottom: 2,
            },
            tabBarIconStyle: {
              marginTop: 4,
            },
          }}
        >
          {/* Home Tab */}
          <Tabs.Screen
            name="(tabs)/index" // Matches the file path app/(tabs)/index.tsx
            options={{
              title: 'Home',
              tabBarIcon: ({ color }) => <FontAwesome name="home" size={24} color={color} />,
            }}
          />
          {/* Bookings Tab */}
          <Tabs.Screen
            name="(tabs)/bookings" // Matches the file path app/(tabs)/bookings.tsx
            options={{
              title: 'Bookings',
              tabBarIcon: ({ color }) => <FontAwesome name="book" size={24} color={color} />,
            }}
          />
          {/* Profile Tab */}
          <Tabs.Screen
            name="(tabs)/profile" // Matches the file path app/(tabs)/profile.tsx
            options={{
              title: 'Profile',
              tabBarIcon: ({ color }) => <FontAwesome name="user" size={24} color={color} />,
            }}
          />
        </Tabs>
      </RootSiblingParent>
    </QueryClientProvider>
  );
}
```typescript
// types/index.ts
// Define TypeScript interfaces for your data models

export interface Property {
  id: string;
  name: string;
  location: string;
  pricePerNight: number;
  rating: number;
  description: string;
  imageUrl: string;
  features: string[]; // List of strings for features
}

export interface Booking {
  id: string;
  propertyId: string;
  userId: string;
  bookingDate: string; // ISO date string, e.g., "2025-07-01"
  checkInDate: string;
  checkOutDate: string;
  totalPrice: number;
}

export interface User {
  id: string;
  name: string;
  email: string;
  // Add other user profile fields as needed
}

// API Response Types (optional, but good practice)
export interface APIPropertiesResponse {
  properties: Property[];
}

export interface APIBookingResponse {
  booking: Booking;
}
```typescript
// api/index.ts
// Centralized API service functions using Fetch API.
// React Query will then wrap these.

import { Property, Booking } from '../types';

const BASE_URL = 'http://localhost:3000'; // Ensure JSON-server is running on this port

// Function to fetch all properties
export const getProperties = async (): Promise<Property[]> => {
  try {
    const response = await fetch(`${BASE_URL}/properties`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data: Property[] = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching properties:', error);
    throw error;
  }
};

// Function to fetch a single property by ID
export const getPropertyById = async (id: string): Promise<Property> => {
  try {
    const response = await fetch(`${BASE_URL}/properties/${id}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data: Property = await response.json();
    return data;
  } catch (error) {
    console.error(`Error fetching property with ID ${id}:`, error);
    throw error;
  }
};

// Function to create a new booking
export const createBooking = async (bookingData: Omit<Booking, 'id'>): Promise<Booking> => {
  try {
    const response = await fetch(`${BASE_URL}/bookings`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(bookingData),
    });
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data: Booking = await response.json();
    return data;
  } catch (error) {
    console.error('Error creating booking:', error);
    throw error;
  }
};

// Function to fetch all bookings (for a specific user, if user authentication was implemented)
export const getBookings = async (): Promise<Booking[]> => {
  try {
    // In a real app, you'd filter by userId:
    // const response = await fetch(`${BASE_URL}/bookings?userId=${userId}`);
    const response = await fetch(`${BASE_URL}/bookings`); // Fetch all for simplicity with json-server
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data: Booking[] = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching bookings:', error);
    throw error;
  }
};
```typescript
// stores/bookingStore.ts
// Zustand store for managing local booking state (e.g., booked properties for immediate display)
// Although bookings are fetched from API, we can use this for optimistic updates or client-side additions.

import { create } from 'zustand';
import { Booking, Property } from '../types';

interface BookingState {
  bookings: Booking[];
  addBooking: (booking: Booking) => void;
  setBookings: (bookings: Booking[]) => void;
  // For simplicity, we won't handle deleting/updating bookings here, but you'd add methods for that.
}

export const useBookingStore = create<BookingState>((set) => ({
  bookings: [], // Initial empty array of bookings
  addBooking: (booking) => set((state) => ({ bookings: [...state.bookings, booking] })),
  setBookings: (bookings) => set({ bookings }),
}));
```typescript
// stores/profileStore.ts
// Zustand store for managing user profile information (placeholder)

import { create } from 'zustand';
import { User } from '../types';

interface ProfileState {
  user: User | null;
  setUser: (user: User) => void;
  clearUser: () => void;
}

export const useProfileStore = create<ProfileState>((set) => ({
  user: { id: 'user-123', name: 'Guest User', email: 'guest@example.com' }, // Default guest user
  setUser: (user) => set({ user }),
  clearUser: () => set({ user: null }),
}));
```typescript
// stores/globalAtoms.ts
// Jotai atoms for simpler, derived, or component-local state.
// Here we'll use it for the search input value.

import { atom } from 'jotai';

// Atom for the search input text
export const searchTermAtom = atom<string>('');
```typescript
// components/LoadingSpinner.tsx
// A simple loading spinner component.

import React from 'react';
import { ActivityIndicator, View, Text } from 'react-native';
// Removed 'styled' import as it's not used directly anymore
// import { styled } from 'nativewind';

// No need for StyledView and StyledText definitions
// const StyledView = styled(View);
// const StyledText = styled(Text);

interface LoadingSpinnerProps {
  message?: string;
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ message = 'Loading...' }) => {
  return (
    // Directly use View and Text with className
    <View className="flex-1 justify-center items-center p-4">
      <ActivityIndicator size="large" color="#3b82f6" /> {/* Tailwind blue-500 */}
      <Text className="text-gray-600 mt-2 text-base font-semibold">{message}</Text>
    </View>
  );
};

export default LoadingSpinner;
```typescript
// components/SearchBar.tsx
// A reusable search bar component.

import React from 'react';
import { TextInput, View, TouchableOpacity, Text } from 'react-native'; // Added Text for the clear button
// Removed 'styled' import
// import { styled } from 'nativewind';
import { FontAwesome } from '@expo/vector-icons';
import { useAtom } from 'jotai';
import { searchTermAtom } from '../stores/globalAtoms';

// No need for Styled components
// const StyledView = styled(View);
// const StyledTextInput = styled(TextInput);
// const StyledTouchableOpacity = styled(TouchableOpacity);

interface SearchBarProps {
  placeholder?: string;
}

const SearchBar: React.FC<SearchBarProps> = ({ placeholder = 'Search properties...' }) => {
  const [searchTerm, setSearchTerm] = useAtom(searchTermAtom);

  const handleClear = () => {
    setSearchTerm('');
  };

  return (
    // Directly use View, TextInput, TouchableOpacity with className
    <View className="flex-row items-center bg-gray-100 rounded-lg py-3 px-4 mx-4 my-4 shadow-sm border border-gray-200">
      <FontAwesome name="search" size={20} color="#6b7280" className="mr-3" />
      <TextInput
        className="flex-1 text-base text-gray-800 font-inter-regular"
        placeholder={placeholder}
        placeholderTextColor="#9ca3af"
        value={searchTerm}
        onChangeText={setSearchTerm}
        clearButtonMode="while-editing" // iOS specific clear button
        accessibilityLabel="Search properties"
      />
      {searchTerm.length > 0 && (
        <TouchableOpacity onPress={handleClear} className="ml-3 p-1 rounded-full bg-gray-200">
          <FontAwesome name="times-circle" size={18} color="#6b7280" />
        </TouchableOpacity>
      )}
    </View>
  );
};

export default SearchBar;
```typescript
// components/PropertyCard.tsx
// Reusable component to display individual property information in a card format.

import React from 'react';
import { View, Text, Image, TouchableOpacity } from 'react-native';
// Removed 'styled' import
// import { styled } from 'nativewind';
import { FontAwesome } from '@expo/vector-icons';
import { Property } from '../types';
import { Link } from 'expo-router'; // Use Link for navigation

// No need for Styled components
// const StyledView = styled(View);
// const StyledText = styled(Text);
// const StyledImage = styled(Image);
// const StyledTouchableOpacity = styled(TouchableOpacity);

interface PropertyCardProps {
  property: Property;
}

const PropertyCard: React.FC<PropertyCardProps> = ({ property }) => {
  return (
    // Link from expo-router makes the entire card tappable and navigates
    <Link href={`/property/${property.id}`} asChild>
      <TouchableOpacity className="bg-white rounded-xl shadow-md overflow-hidden m-4 mb-2 border border-gray-100 flex-row md:flex-col lg:flex-row">
        {/* Property Image */}
        <Image
          source={{ uri: property.imageUrl || '[https://placehold.co/150x150/e0e0e0/555555?text=Property](https://placehold.co/150x150/e0e0e0/555555?text=Property)' }}
          className="w-full h-48 sm:h-56 md:h-64 lg:w-48 lg:h-auto object-cover rounded-t-xl lg:rounded-l-xl lg:rounded-tr-none"
          resizeMode="cover"
        />

        {/* Property Details */}
        <View className="p-4 flex-1">
          <Text className="text-xl font-bold text-gray-800 mb-1 font-inter-bold">{property.name}</Text>
          <Text className="text-sm text-gray-600 mb-2 font-inter-regular">
            <FontAwesome name="map-marker" size={14} color="#6b7280" /> {property.location}
          </Text>
          <View className="flex-row items-center mb-2">
            <FontAwesome name="star" size={16} color="#facc15" /> {/* Tailwind yellow-400 */}
            <Text className="text-base text-gray-700 ml-1 font-inter-regular">{property.rating.toFixed(1)}</Text>
            <Text className="text-lg font-bold text-blue-600 ml-auto font-inter-bold">
              ${property.pricePerNight}
              <Text className="text-sm text-gray-500 font-inter-regular">/night</Text>
            </Text>
          </View>
          <Text className="text-sm text-gray-700 font-inter-regular leading-snug">
            {property.description.substring(0, 100)}...
          </Text>
        </View>
      </TouchableOpacity>
    </Link>
  );
};

export default PropertyCard;
```typescript
// hooks/useProperties.ts
// Custom hook for fetching properties using React Query.

import { useQuery } from '@tanstack/react-query';
import { getProperties, getPropertyById } from '../api';
import { Property } from '../types';

export const useProperties = () => {
  return useQuery<Property[], Error>({
    queryKey: ['properties'], // Unique key for this query
    queryFn: getProperties, // Function to fetch the data
    staleTime: 5 * 60 * 1000, // Data is considered fresh for 5 minutes
    cacheTime: 10 * 60 * 1000, // Data stays in cache for 10 minutes
  });
};

export const usePropertyById = (id: string) => {
  return useQuery<Property, Error>({
    queryKey: ['property', id], // Unique key for a single property
    queryFn: () => getPropertyById(id),
    enabled: !!id, // Only run query if ID is available
    staleTime: 5 * 60 * 1000,
    cacheTime: 10 * 60 * 1000,
  });
};
```typescript
// hooks/useBookProperty.ts
// Custom hook for booking a property using React Query mutation.

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { createBooking } from '../api';
import { Booking } from '../types';
import { useBookingStore } from '../stores/bookingStore'; // Zustand store for local updates
import Toast from 'react-native-root-siblings'; // For showing simple toast messages

export const useBookProperty = () => {
  const queryClient = useQueryClient();
  const addBookingToStore = useBookingStore((state) => state.addBooking);

  return useMutation<Booking, Error, Omit<Booking, 'id'>>({
    mutationFn: createBooking, // The API function to call
    onMutate: async (newBookingData) => {
      // Optional: Cancel any outgoing refetches for bookings to prevent race conditions
      await queryClient.cancelQueries({ queryKey: ['bookings'] });

      // Optional: Optimistically update the local state (Zustand)
      // This makes the UI feel faster by immediately showing the booking
      // You might generate a temporary ID here if the API doesn't return one immediately
      const temporaryBooking: Booking = {
        ...newBookingData,
        id: `temp-${Date.now()}`, // Generate a temporary ID
        bookingDate: new Date().toISOString().split('T')[0], // Current date
      };
      addBookingToStore(temporaryBooking);
      Toast.show('Booking in progress...', { duration: Toast.durations.SHORT });

      return { temporaryBooking }; // Context passed to onError/onSettled
    },
    onSuccess: (data, variables, context) => {
      // Invalidate the 'bookings' query to refetch the latest data from the API
      // This ensures our bookings screen is up-to-date with the server
      queryClient.invalidateQueries({ queryKey: ['bookings'] });
      // Update the temporary booking in Zustand with the actual one from the API
      // (This would require a `updateBooking` method in your Zustand store)
      // For simplicity, we'll just add the real one and rely on refetch for full sync.
      Toast.show('Property booked successfully!', { duration: Toast.durations.LONG, position: Toast.positions.BOTTOM });
    },
    onError: (error, variables, context) => {
      // Rollback optimistic update if the mutation fails
      // This would involve removing the temporaryBooking from the Zustand store
      // For now, we'll just show an error toast.
      console.error('Booking failed:', error);
      Toast.show(`Booking failed: ${error.message}`, { duration: Toast.durations.LONG, position: Toast.positions.BOTTOM });
      // If you had a sophisticated rollback:
      // useBookingStore.getState().removeBooking(context?.temporaryBooking?.id);
    },
    // You can also use onSettled which runs after either success or error
    // onSettled: () => {
    //   queryClient.invalidateQueries({ queryKey: ['bookings'] });
    // },
  });
};
```typescript
// app/(tabs)/index.tsx
// Home Screen: Displays a list of properties and a search bar.

import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, ScrollView, RefreshControl } from 'react-native';
// Removed 'styled' import
// import { styled } from 'nativewind';
import { useProperties } from '../../hooks/useProperties';
import PropertyCard from '../../components/PropertyCard';
import SearchBar from '../../components/SearchBar';
import LoadingSpinner from '../../components/LoadingSpinner';
import { useAtom } from 'jotai';
import { searchTermAtom } from '../../stores/globalAtoms';
import { FontAwesome } from '@expo/vector-icons';
import { useProfileStore } from '../../stores/profileStore'; // To display user info in header

// No need for Styled components
// const StyledView = styled(View);
// const StyledText = styled(Text);
// const StyledScrollView = styled(ScrollView);

export default function HomeScreen() {
  const { data: properties, isLoading, isError, error, refetch, isRefetching } = useProperties();
  const [searchTerm] = useAtom(searchTermAtom);
  const { user } = useProfileStore();

  const filteredProperties = properties?.filter(property =>
    property.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    property.location.toLowerCase().includes(searchTerm.toLowerCase()) ||
    property.description.toLowerCase().includes(searchTerm.toLowerCase())
  ) || [];

  if (isLoading) {
    return <LoadingSpinner message="Fetching properties..." />;
  }

  if (isError) {
    return (
      // Directly use View and Text with className
      <View className="flex-1 justify-center items-center p-4 bg-red-50">
        <FontAwesome name="exclamation-triangle" size={50} color="#ef4444" className="mb-4" />
        <Text className="text-red-600 text-lg font-bold mb-2">Error loading properties!</Text>
        <Text className="text-red-500 text-sm text-center">
          {error?.message || 'An unexpected error occurred.'}
        </Text>
        <Text className="text-red-500 text-sm mt-2 text-center">
          Please ensure your JSON server is running on `http://localhost:3000`.
        </Text>
        <Text className="text-red-500 text-sm mt-1 text-center">
          Run: `json-server --watch db.json --port 3000`
        </Text>
      </View>
    );
  }

  return (
    <View className="flex-1 bg-gray-50">
      {/* Header */}
      <View className="flex-row items-center justify-between p-4 pb-0 bg-white shadow-sm border-b border-gray-100">
        <Text className="text-2xl font-extrabold text-gray-900 font-inter-bold">
          Property Listings
        </Text>
        <View className="flex-row items-center">
          <Text className="text-lg text-gray-700 mr-2 font-inter-regular">Hi, {user?.name.split(' ')[0]}!</Text>
          <FontAwesome name="user-circle" size={30} color="#3b82f6" />
        </View>
      </View>

      {/* Search Bar */}
      <SearchBar />

      {/* Property List */}
      {filteredProperties.length === 0 ? (
        <ScrollView
          contentContainerStyle={{ flexGrow: 1, justifyContent: 'center', alignItems: 'center', padding: 20 }}
          refreshControl={<RefreshControl refreshing={isRefetching} onRefresh={refetch} tintColor="#3b82f6" />}
          className="flex-1"
        >
          <FontAwesome name="exclamation-circle" size={50} color="#9ca3af" className="mb-4" />
          <Text className="text-gray-500 text-lg font-inter-regular">No properties found.</Text>
          <Text className="text-gray-400 text-sm mt-1 font-inter-regular">Try a different search term or pull to refresh.</Text>
        </ScrollView>
      ) : (
        <FlatList
          data={filteredProperties}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => <PropertyCard property={item} />}
          showsVerticalScrollIndicator={false}
          contentContainerStyle={{ paddingBottom: 20 }}
          refreshControl={<RefreshControl refreshing={isRefetching} onRefresh={refetch} tintColor="#3b82f6" />}
        />
      )}
    </View>
  );
}
```typescript
// app/property/[id].tsx
// Property Detail Screen: Displays details of a single property.

import React from 'react';
import { View, Text, Image, ScrollView, TouchableOpacity, Linking, Platform } from 'react-native';
// Removed 'styled' import
// import { styled } from 'nativewind';
import { useLocalSearchParams, Stack, useRouter } from 'expo-router';
import { usePropertyById } from '../../hooks/useProperties';
import LoadingSpinner from '../../components/LoadingSpinner';
import { FontAwesome } from '@expo/vector-icons';
import { useBookProperty } from '../../hooks/useBookProperty';
import { useProfileStore } from '../../stores/profileStore'; // Get current user for booking

// No need for Styled components
// const StyledView = styled(View);
// const StyledText = styled(Text);
// const StyledImage = styled(Image);
// const StyledScrollView = styled(ScrollView);
// const StyledTouchableOpacity = styled(TouchableOpacity);

export default function PropertyDetailScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const router = useRouter();
  const { data: property, isLoading, isError, error } = usePropertyById(id || '');
  const bookPropertyMutation = useBookProperty();
  const { user } = useProfileStore(); // Get the current user for booking

  const handleBookNow = () => {
    if (!property || !user?.id) {
      // Using a simple alert for now, as per original code.
      // In a real app, replace with a custom modal/toast.
      alert('Property or user data missing. Cannot book.');
      return;
    }

    // Basic booking details for demonstration
    const checkInDate = new Date();
    const checkOutDate = new Date();
    checkOutDate.setDate(checkInDate.getDate() + 3); // Book for 3 nights

    const newBooking = {
      propertyId: property.id,
      userId: user.id, // Use the user's ID from the profile store
      checkInDate: checkInDate.toISOString().split('T')[0],
      checkOutDate: checkOutDate.toISOString().split('T')[0],
      totalPrice: property.pricePerNight * 3, // Example: 3 nights
      bookingDate: new Date().toISOString().split('T')[0],
    };

    bookPropertyMutation.mutate(newBooking);
  };

  const handleOpenMap = (location: string) => {
    const scheme = Platform.select({ ios: 'maps:0,0?q=', android: 'geo:0,0?q=' });
    const latLng = '0,0'; // Placeholder coordinates, ideally from property data
    const label = encodeURIComponent(location);
    const url = Platform.select({
      ios: `${scheme}${label}@${latLng}`,
      android: `${scheme}${latLng}(${label})`
    });

    if (url) {
      Linking.openURL(url).catch(err => console.error('An error occurred opening map:', err));
    }
  };

  if (isLoading) {
    return <LoadingSpinner message="Loading property details..." />;
  }

  if (isError || !property) {
    return (
      // Directly use View, Text, TouchableOpacity with className
      <View className="flex-1 justify-center items-center p-4 bg-red-50">
        <Stack.Screen options={{ title: 'Property Not Found' }} />
        <FontAwesome name="frown-o" size={50} color="#ef4444" className="mb-4" />
        <Text className="text-red-600 text-lg font-bold mb-2">Property not found!</Text>
        <Text className="text-red-500 text-sm text-center">
          {error?.message || 'The property you are looking for does not exist or an error occurred.'}
        </Text>
        <TouchableOpacity onPress={() => router.back()} className="mt-4 bg-red-500 px-4 py-2 rounded-lg">
          <Text className="text-white font-semibold">Go Back</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View className="flex-1 bg-gray-50">
      <Stack.Screen
        options={{
          title: property.name,
          headerShown: true, // Show header for this screen
          headerBackTitleVisible: false, // Hide back button text on iOS
          headerTitleStyle: { fontFamily: 'Inter-Bold', fontSize: 18 },
          headerStyle: { backgroundColor: '#fff' },
          headerTintColor: '#3b82f6', // Back button color
        }}
      />
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Property Image */}
        <Image
          source={{ uri: property.imageUrl || '[https://placehold.co/400x250/e0e0e0/555555?text=Property](https://placehold.co/400x250/e0e0e0/555555?text=Property)' }}
          className="w-full h-64 md:h-80 object-cover"
          resizeMode="cover"
        />

        {/* Details Section */}
        <View className="p-4 bg-white rounded-t-2xl -mt-4 shadow-lg mx-2">
          <Text className="text-3xl font-extrabold text-gray-900 mb-2 font-inter-bold">{property.name}</Text>
          <View className="flex-row items-center mb-3">
            <FontAwesome name="map-marker" size={18} color="#6b7280" />
            <Text className="text-lg text-gray-700 ml-2 font-inter-regular">{property.location}</Text>
            <Text className="text-xl font-bold text-blue-600 ml-auto font-inter-bold">
              ${property.pricePerNight}
              <Text className="text-base text-gray-500 font-inter-regular">/night</Text>
            </Text>
          </View>

          <View className="flex-row items-center mb-4">
            <FontAwesome name="star" size={20} color="#facc15" />
            <Text className="text-lg text-gray-700 ml-1 font-inter-regular">{property.rating.toFixed(1)} Rating</Text>
          </View>

          <Text className="text-base text-gray-800 leading-relaxed mb-6 font-inter-regular">
            {property.description}
          </Text>

          {/* Features Section */}
          {property.features && property.features.length > 0 && (
            <View className="mb-6">
              <Text className="text-xl font-bold text-gray-900 mb-3 font-inter-bold">Features</Text>
              <View className="flex-row flex-wrap">
                {property.features.map((feature, index) => (
                  <View key={index} className="flex-row items-center bg-blue-100 rounded-full px-4 py-2 mr-2 mb-2">
                    <FontAwesome name="check-circle" size={16} color="#3b82f6" />
                    <Text className="text-blue-700 text-sm ml-2 font-inter-regular">{feature}</Text>
                  </View>
                ))}
              </View>
            </View>
          )}

          {/* Map Placeholder */}
          <View className="mb-6 p-4 bg-gray-100 rounded-lg">
            <Text className="text-xl font-bold text-gray-900 mb-3 font-inter-bold">Location on Map</Text>
            <TouchableOpacity onPress={() => handleOpenMap(property.location)} className="w-full h-40 bg-gray-200 rounded-lg justify-center items-center overflow-hidden">
              <FontAwesome name="map" size={50} color="#a1a1aa" />
              <Text className="text-gray-500 mt-2 font-inter-regular">Tap to open in Maps</Text>
            </TouchableOpacity>
            <Text className="text-sm text-gray-600 mt-2 font-inter-regular text-center">
              (Interactive map would be here with API integration)
            </Text>
          </View>

          {/* Book Now Button */}
          <TouchableOpacity
            onPress={handleBookNow}
            className={`bg-blue-600 py-4 rounded-xl items-center justify-center shadow-lg active:bg-blue-700 ${bookPropertyMutation.isPending ? 'opacity-70' : ''}`}
            disabled={bookPropertyMutation.isPending}
          >
            {bookPropertyMutation.isPending ? (
              <LoadingSpinner message="Booking..." />
            ) : (
              <Text className="text-white text-xl font-extrabold font-inter-bold">Book Now</Text>
            )}
          </TouchableOpacity>
        </View>
        <View className="pb-10 bg-gray-50"></View> {/* Padding for bottom tab nav */}
      </ScrollView>
    </View>
  );
}
```typescript
// app/(tabs)/bookings.tsx
// Bookings Screen: Displays a list of user's booked properties.

import React, { useEffect } from 'react';
import { View, Text, FlatList, RefreshControl, Image, TouchableOpacity } from 'react-native'; // Added Image and TouchableOpacity
// Removed 'styled' import
// import { styled } from 'nativewind';
import { useQuery } from '@tanstack/react-query';
import { getBookings } from '../../api';
import { Booking, Property } from '../../types';
import LoadingSpinner from '../../components/LoadingSpinner';
import { useBookingStore } from '../../stores/bookingStore'; // Use Zustand for immediate updates
import { useProperties } from '../../hooks/useProperties'; // To get property details for bookings
import { FontAwesome } from '@expo/vector-icons';
import { Link } from 'expo-router';

// No need for Styled components
// const StyledView = styled(View);
// const StyledText = styled(Text);
// const StyledTouchableOpacity = styled(TouchableOpacity);
// const StyledImage = styled(Image);

interface BookingCardProps {
  booking: Booking;
  property: Property | undefined;
}

const BookingCard: React.FC<BookingCardProps> = ({ booking, property }) => {
  if (!property) {
    return (
      // Directly use View and Text with className
      <View className="bg-white rounded-xl shadow-md p-4 m-4 mb-2 border border-gray-100">
        <Text className="text-red-500 font-bold">Property details not available for this booking.</Text>
        <Text className="text-sm text-gray-500 mt-1">Booking ID: {booking.id}</Text>
      </View>
    );
  }

  return (
    <Link href={`/property/${property.id}`} asChild>
      <TouchableOpacity className="bg-white rounded-xl shadow-md overflow-hidden m-4 mb-2 border border-gray-100 flex-row">
        <Image
          source={{ uri: property.imageUrl || 'https://placehold.co/100x100/e0e0e0/555555?text=Property' }}
          className="w-28 h-28 object-cover rounded-l-xl"
          resizeMode="cover"
        />
        <View className="p-3 flex-1">
          <Text className="text-lg font-bold text-gray-800 mb-1 font-inter-bold">{property.name}</Text>
          <Text className="text-sm text-gray-600 mb-1 font-inter-regular">
            <FontAwesome name="calendar" size={14} color="#6b7280" /> Check-in: {booking.checkInDate}
          </Text>
          <Text className="text-sm text-gray-600 mb-2 font-inter-regular">
            <FontAwesome name="calendar-check-o" size={14} color="#6b7280" /> Check-out: {booking.checkOutDate}
          </Text>
          <Text className="text-md font-bold text-blue-600 font-inter-bold">
            Total: ${booking.totalPrice}
          </Text>
        </View>
      </TouchableOpacity>
    </Link>
  );
};


export default function BookingsScreen() {
  // Fetch all properties to be able to display property details within booking cards
  const { data: allProperties } = useProperties();
  const propertiesMap = new Map(allProperties?.map(p => [p.id, p]));

  // Fetch bookings using React Query
  const { data: apiBookings, isLoading, isError, error, refetch, isRefetching } = useQuery<Booking[], Error>({
    queryKey: ['bookings'],
    queryFn: getBookings,
    staleTime: 5 * 60 * 1000,
  });

  // Use Zustand for bookings that are optimistically added or for immediate display
  const { bookings: zustandBookings, setBookings } = useBookingStore();

  useEffect(() => {
    if (apiBookings) {
      // When API data is available, update the Zustand store to reflect the server state
      setBookings(apiBookings);
    }
  }, [apiBookings, setBookings]);

  if (isLoading) {
    return <LoadingSpinner message="Loading your bookings..." />;
  }

  if (isError) {
    return (
      // Directly use View and Text with className
      <View className="flex-1 justify-center items-center p-4 bg-red-50">
        <FontAwesome name="exclamation-triangle" size={50} color="#ef4444" className="mb-4" />
        <Text className="text-red-600 text-lg font-bold mb-2">Error loading bookings!</Text>
        <Text className="text-red-500 text-sm text-center">
          {error?.message || 'An unexpected error occurred.'}
        </Text>
      </View>
    );
  }

  const combinedBookings = zustandBookings; // For simplicity, rely on Zustand being updated by API fetch

  return (
    <View className="flex-1 bg-gray-50">
      {/* Header */}
      <View className="p-4 bg-white shadow-sm border-b border-gray-100">
        <Text className="text-2xl font-extrabold text-gray-900 font-inter-bold">My Bookings</Text>
      </View>

      {combinedBookings.length === 0 ? (
        <View className="flex-1 justify-center items-center p-4">
          <FontAwesome name="bookmark-o" size={50} color="#9ca3af" className="mb-4" />
          <Text className="text-gray-500 text-lg font-inter-regular">You have no bookings yet.</Text>
          <Text className="text-gray-400 text-sm mt-1 font-inter-regular">Start exploring properties to book one!</Text>
        </View>
      ) : (
        <FlatList
          data={combinedBookings}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <BookingCard booking={item} property={propertiesMap.get(item.propertyId)} />
          )}
          showsVerticalScrollIndicator={false}
          contentContainerStyle={{ paddingBottom: 20 }}
          refreshControl={<RefreshControl refreshing={isRefetching} onRefresh={refetch} tintColor="#3b82f6" />}
        />
      )}
    </View>
  );
}
```typescript
// app/(tabs)/profile.tsx
// Profile Screen: Displays user profile information (placeholder).

import React from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
// Removed 'styled' import
// import { styled } from 'nativewind';
import { FontAwesome } from '@expo/vector-icons';
import { useProfileStore } from '../../stores/profileStore';

// No need for Styled components
// const StyledView = styled(View);
// const StyledText = styled(Text);
// const StyledTouchableOpacity = styled(TouchableOpacity);

export default function ProfileScreen() {
  const { user, clearUser } = useProfileStore();

  const handleLogout = () => {
    // In a real app, this would clear authentication tokens, etc.
    clearUser();
    // Redirect to login screen if one existed
    // Using a simple alert for now, as per original code.
    // In a real app, replace with a custom modal/toast.
    alert('Logged out (functionality not fully implemented)');
  };

  return (
    // Directly use View, Text, TouchableOpacity with className
    <View className="flex-1 bg-gray-50">
      {/* Header */}
      <View className="p-4 bg-white shadow-sm border-b border-gray-100">
        <Text className="text-2xl font-extrabold text-gray-900 font-inter-bold">Profile</Text>
      </View>

      <View className="flex-1 items-center p-6 mt-8">
        <View className="bg-white rounded-xl shadow-lg p-8 w-full max-w-md items-center border border-gray-100">
          <FontAwesome name="user-circle" size={80} color="#3b82f6" className="mb-4" />
          {user ? (
            <>
              <Text className="text-2xl font-bold text-gray-900 mb-2 font-inter-bold">{user.name}</Text>
              <Text className="text-md text-gray-600 mb-6 font-inter-regular">{user.email}</Text>
              {/* Add more profile fields here */}
              <View className="w-full border-t border-gray-200 pt-4 mt-4">
                <TouchableOpacity
                  onPress={() => alert('Edit Profile functionality not implemented')}
                  className="flex-row items-center justify-center bg-gray-100 py-3 rounded-lg mb-3"
                >
                  <FontAwesome name="edit" size={20} color="#4b5563" />
                  <Text className="text-gray-800 ml-3 text-lg font-inter-semibold">Edit Profile</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  onPress={handleLogout}
                  className="flex-row items-center justify-center bg-red-100 py-3 rounded-lg"
                >
                  <FontAwesome name="sign-out" size={20} color="#dc2626" />
                  <Text className="text-red-700 ml-3 text-lg font-inter-semibold">Logout</Text>
                </TouchableOpacity>
              </View>
            </>
          ) : (
            <View>
              <Text className="text-lg text-gray-600 font-inter-regular mb-4">You are not logged in.</Text>
              <TouchableOpacity
                onPress={() => alert('Login functionality not implemented')}
                className="bg-blue-600 py-3 px-6 rounded-lg shadow-md"
              >
                <Text className="text-white text-lg font-inter-bold">Login / Sign Up</Text>
              </TouchableOpacity>
            </View>
          )}
        </View>
      </View>
    </View>
  );
}
```typescript
// assets/fonts/Inter-Regular.ttf and Inter-Bold.ttf
// You'll need to download these font files and place them in this directory.
// For example, from Google Fonts: https://fonts.google.com/specimen/Inter
// Download the family, extract, and copy the Regular and Bold .ttf files.
```json
// package.json (relevant parts for dependencies)
// Ensure these versions are present or compatible.
{
  "dependencies": {
    "@babel/core": "7.27.4",
    "@expo/vector-icons": "14.1.0",
    "@react-navigation/native": "7.1.11",
    "@tanstack/react-query": "^5.0.0",
    "@types/react": "19.0.14",
    "expo": "53.0.11",
    "expo-font": "13.3.1",
    "expo-linking": "7.1.5",
    "expo-router": "5.1.0",
    "expo-splash-screen": "0.30.9",
    "expo-status-bar": "2.2.3",
    "expo-system-ui": "5.0.8",
    "expo-web-browser": "14.1.6",
    "jest-expo": "53.0.7",
    "jest": "29.7.0",
    "jotai": "^2.0.0",
    "nativewind": "^4.0.0",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-native": "0.79.3",
    "react-native-reanimated": "3.17.5",
    "react-native-root-siblings": "^5.0.1",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "4.11.1",
    "react-native-web": "0.20.0",
    "react-test-renderer": "19.0.0",
    "typescript": "5.8.3",
    "zustand": "^4.0.0"
  },
  "devDependencies": {
    "postcss": "^8.0.0",
    "tailwindcss": "^3.0.0",
    "@welldone-software/why-did-you-render": "^7.0.1" // For Jotai devtools (optional)
  }
}
